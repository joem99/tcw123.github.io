<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yuwen Mi&#39;s Space</title>
  <icon>https://www.gravatar.com/avatar/376f6cb13e98ff675f5b604a199d7024</icon>
  <subtitle>👊👊👊👊</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-19T07:05:27.951Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yuwen Mi</name>
    <email>mywjyw@foxmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaGuide笔记</title>
    <link href="http://yoursite.com/2020/08/19/JavaGuide%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/08/19/JavaGuide%E7%AC%94%E8%AE%B0/</id>
    <published>2020-08-19T07:04:57.000Z</published>
    <updated>2020-08-19T07:05:27.951Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java基础知识"><a href="#Java基础知识" class="headerlink" title="Java基础知识"></a>Java基础知识</h1><h2 id="java基本功"><a href="#java基本功" class="headerlink" title="java基本功"></a>java基本功</h2><h3 id="java和c-的区别"><a href="#java和c-的区别" class="headerlink" title="java和c++的区别"></a>java和c++的区别</h3><ul><li>都是面向对象的语言，都支持封装、继承和多态</li><li>Java 不提供指针来直接访问内存，程序内存更加安全</li><li>Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。</li><li>Java 有自动内存管理机制，不需要程序员手动释放无用内存</li><li><em>在 C 语言中，字符串或字符数组最后都会有一个额外的字符‘\0’来表示结束。但是，Java 语言中没有结束符这一概念。</em></li></ul><h3 id="Java语法"><a href="#Java语法" class="headerlink" title="Java语法"></a>Java语法</h3><h4 id="Java泛型"><a href="#Java泛型" class="headerlink" title="Java泛型"></a>Java泛型</h4><ol><li>泛型方法：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static &lt; E &gt; void printArray( E[] inputArray )</span><br><span class="line">   &#123;         </span><br><span class="line">         for ( E element : inputArray )&#123;        </span><br><span class="line">            System.out.printf( &quot;%s &quot;, element );</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p><em>常用的通配符为： T，E，K，V，？</em></p><ul><li>？ 表示不确定的 java 类型</li><li>T (type) 表示具体的一个java类型</li><li>K V (key value) 分别代表java键值中的Key Value</li><li>E (element) 代表Element</li></ul><h4 id="hashCode-与equals"><a href="#hashCode-与equals" class="headerlink" title="hashCode()与equals()"></a>hashCode()与equals()</h4><p><a href="https://www.cnblogs.com/skywang12345/p/3324958.html">https://www.cnblogs.com/skywang12345/p/3324958.html</a></p><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><h4 id="8种基本类型的包装类和常量池"><a href="#8种基本类型的包装类和常量池" class="headerlink" title="8种基本类型的包装类和常量池"></a>8种基本类型的包装类和常量池</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Integer i1 &#x3D; 40;</span><br><span class="line">Integer i2 &#x3D; 40;</span><br><span class="line">Integer i3 &#x3D; 0;</span><br><span class="line">Integer i4 &#x3D; new Integer(40);</span><br><span class="line">Integer i5 &#x3D; new Integer(40);</span><br><span class="line">Integer i6 &#x3D; new Integer(0);</span><br><span class="line"></span><br><span class="line">System.out.println(“i1&#x3D;i2   “ + (i1 &#x3D;&#x3D; i2));</span><br><span class="line">System.out.println(“i1&#x3D;i2+i3   “ + (i1 &#x3D;&#x3D; i2 + i3));</span><br><span class="line">System.out.println(“i1&#x3D;i4   “ + (i1 &#x3D;&#x3D; i4));</span><br><span class="line">System.out.println(“i4&#x3D;i5   “ + (i4 &#x3D;&#x3D; i5));</span><br><span class="line">System.out.println(“i4&#x3D;i5+i6   “ + (i4 &#x3D;&#x3D; i5 + i6));   </span><br><span class="line">System.out.println(“40&#x3D;i5+i6   “ + (40 &#x3D;&#x3D; i5 + i6));     </span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i1&#x3D;i2   true</span><br><span class="line">i1&#x3D;i2+i3   true</span><br><span class="line">i1&#x3D;i4   false</span><br><span class="line">i4&#x3D;i5   false</span><br><span class="line">i4&#x3D;i5+i6   true</span><br><span class="line">40&#x3D;i5+i6   true</span><br></pre></td></tr></table></figure><p>解释：<br>+操作不适用于Integer对线，因此回自动拆箱操作，进行数值相加。</p><h2 id="Java面向对象"><a href="#Java面向对象" class="headerlink" title="Java面向对象"></a>Java面向对象</h2><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><h4 id="在java中定义无参的构造方法"><a href="#在java中定义无参的构造方法" class="headerlink" title="在java中定义无参的构造方法"></a>在java中定义无参的构造方法</h4><p>Java 程序在执行子类的构造方法之前，如果没有用 super()来调用父类特定的构造方法，则会调用父类中“没有参数的构造方法”。因此，如果父类中只定义了有参数的构造方法，而在子类的构造方法中又没有用 super()来调用父类中特定的构造方法，则编译时将发生错误，因为 Java 程序在父类中找不到没有参数的构造方法可供执行。解决办法是在父类里加上一个不做事且没有参数的构造方法。</p><h3 id="面向对象三大特征"><a href="#面向对象三大特征" class="headerlink" title="面向对象三大特征"></a>面向对象三大特征</h3><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>private修饰属性，public方法用来获得属性并返回。</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p><em>关于继承如下 3 点请记住：</em><br>1 子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，<em>只是拥有</em>。<br>2 子类可以拥有自己属性和方法，即子类可以对父类进行扩展。<br>3 子类可以用自己的方式实现父类的方法。（以后介绍）。</p><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><h3 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h3><h2 id="Java核心技术"><a href="#Java核心技术" class="headerlink" title="Java核心技术"></a>Java核心技术</h2><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p><em>注意：</em> 当 try 语句和 finally 语句中都有 return 语句时，在方法返回之前，finally 语句的内容将被执行，并且 finally 语句的返回值将会覆盖原始的返回值。</p><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>与进程不同，同类的多个线程共享同一块内存空间和一组系统资源。</p><p><em>进程是系统运行程序的基本单位</em></p><h3 id="文件与I-O流"><a href="#文件与I-O流" class="headerlink" title="文件与I/O流"></a>文件与I/O流</h3><p><em>不管是文件读写还是网络发送接收，信息的最小存储单元都是字节，那为什么 I/O 流操作要分为字节流操作和字符流操作呢？</em><br>回答：字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还算是非常耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。所以， I/O 流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。</p><h1 id="Java集合框架"><a href="#Java集合框架" class="headerlink" title="Java集合框架"></a>Java集合框架</h1><h2 id="集合概述"><a href="#集合概述" class="headerlink" title="集合概述"></a>集合概述</h2><p>[image:8C704DD8-7B72-4EF3-8FBF-0C6B3706B105-6931-0000695C8EBD05B1/Java-Collections.jpeg]</p><h2 id="Collection子接口List"><a href="#Collection子接口List" class="headerlink" title="Collection子接口List"></a>Collection子接口List</h2><h3 id="ArrayList和Vector的区别"><a href="#ArrayList和Vector的区别" class="headerlink" title="ArrayList和Vector的区别"></a>ArrayList和Vector的区别</h3><ol><li>ArrayList 是 List 的主要实现类，底层使用 Object[ ]存储，适用于频繁的查找工作，线程不安全 ；</li><li>Vector 是 List 的古老实现类，底层使用 Object[ ]存储，线程安全的。</li></ol><h3 id="ArrayLIst和LinkedList区别"><a href="#ArrayLIst和LinkedList区别" class="headerlink" title="ArrayLIst和LinkedList区别"></a>ArrayLIst和LinkedList区别</h3><ol><li><em>底层数据结构</em>：<code>Arraylist </code>底层使用的是 <code>Object</code><em>数组</em>；<code>LinkedList</code> 底层使用的是 <em>双向链表</em> 数据结构</li><li><em>插入和删除是否受元素位置的影响：</em> ① <code>ArrayList</code><em>采用数组存储，所以插入和删除元素的时间复杂度受元素位置的影响。</em> 比如：执行<code>add(E e)</code>方法的时候，<code> ArrayList</code> 会默认在将指定的元素追加到此列表的末尾，这种情况时间复杂度就是 O(1)。但是如果要在指定位置 i 插入和删除元素的话<code>（add(int index, E element)）</code>时间复杂度就为 O(n-i)。因为在进行上述操作的时候集合中第 i 和第 i 个元素之后的(n-i)个元素都要执行向后位/向前移一位的操作。 ② <code>LinkedList</code><em>采用链表存储，所以对于</em><code>add(E e)</code><em>方法的插入，删除元素时间复杂度不受元素位置的影响，近似 O(1)，如果是要在指定位置</em>i<em>插入和删除元素的话<code>（*(add(int index, E element)*）</code> 时间复杂度近似为</em><code>o(n))</code><em>因为需要先移动到指定位置再插入。</em></li><li><em>内存空间占用：</em> ArrayList 的空 间浪费主要体现在在 list 列表的结尾会预留一定的容量空间，而 LinkedList 的空间花费则体现在它的每一个元素都需要消耗比 ArrayList 更多的空间（因为要存放直接后继和直接前驱以及数据）。</li></ol><h2 id="Collection子接口Set"><a href="#Collection子接口Set" class="headerlink" title="Collection子接口Set"></a>Collection子接口Set</h2><h3 id="Comparable和Comparator"><a href="#Comparable和Comparator" class="headerlink" title="Comparable和Comparator"></a>Comparable和Comparator</h3><ul><li><code>comparable</code> 接口实际上是出自<br><code>java.lang</code>包 它有一个<br><code>compareTo(Object obj)</code> 方法用来排序</li><li><code>comparator</code> 接口实际上是出自 <code>java.util</code> 包它有一个<br><code>compare(Object obj1, Object obj2)</code> 方法用来排序</li></ul><p><code>implements Comparable</code>接口的类重写<code>compareTo</code>来实现自定义排序</p><h3 id="set无序性和不可重复性"><a href="#set无序性和不可重复性" class="headerlink" title="set无序性和不可重复性"></a>set无序性和不可重复性</h3><ol><li>什么是无序性？无序性不等于随机性 ，无序性是指存储的数据在底层数组中并非按照数组索引的顺序添加 ，而是根据数据的哈希值决定的。</li><li>什么是不可重复性？不可重复性是指添加的元素按照 equals()判断时 ，返回 false，需要同时重写 equals()方法和 HashCode()方法。</li></ol><h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h1><h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><h2 id="Java内存区域"><a href="#Java内存区域" class="headerlink" title="Java内存区域"></a>Java内存区域</h2><h3 id="一-概述"><a href="#一-概述" class="headerlink" title="一 概述"></a>一 概述</h3><p>Java中不需要为每一个new操作区写对应的free</p><h3 id="二-运行时数据区域"><a href="#二-运行时数据区域" class="headerlink" title="二 运行时数据区域"></a>二 运行时数据区域</h3><p>JDK 1.8:<br>[image:B3776FAA-F613-447E-8696-6C35A25D2294-6931-00008E8C37A6B67C/2019-3Java运行时数据区域JDK1.8.png]</p><p><em>线程私有的：</em></p><ul><li>程序计数器</li><li>虚拟机栈</li><li>本地方法栈</li><li>线程共享的：*</li><li>堆</li><li>方法区</li><li>直接内存 (非运行时数据区的一部分)</li></ul><h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h4><p><em>字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完成。</em></p><h4 id="Java虚拟机栈（虚拟机中拘捕变量表部分）"><a href="#Java虚拟机栈（虚拟机中拘捕变量表部分）" class="headerlink" title="Java虚拟机栈（虚拟机中拘捕变量表部分）"></a>Java虚拟机栈（虚拟机中拘捕变量表部分）</h4><p><em>描述的是 Java 方法执行的内存模型，每次方法调用的数据都是通过栈传递的。</em><br>实际上，Java 虚拟机栈是由一个个栈帧组成，而每个栈帧中都拥有：局部变量表、操作数栈、动态链接、方法出口信息。</p><p><em>局部变量表主要存放了编译期可知的各种数据类型</em>（boolean、byte、char、short、int、float、long、double）、<em>对象引用</em>（reference 类型，它不同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）。</p><p>Java 栈中保存的主要内容是栈帧，每一次函数调用都会有一个对应的栈帧被压入 Java 栈，每一个函数调用结束后，都会有一个栈帧被弹出。<br>Java 方法有两种返回方式：</p><ol><li>return 语句。</li><li>抛出异常。<br>不管哪种返回方式都会导致栈帧被弹出。</li></ol><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><p>Java堆多有线程共享。<em>唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。</em></p><p>Java 堆是垃圾收集器管理的主要区域，因此也被称作<em>GC 堆（Garbage Collected Heap）</em>.从垃圾回收的角度，由于现在收集器基本都采用分代垃圾收集算法，所以 Java 堆还可以细分为：新生代和老年代：再细致一点有：Eden 空间、From Survivor、To Survivor 空间等。<em>进一步划分的目的是更好地回收内存，或者更快地分配内存。</em></p><h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><p>#Javaguide# #笔记</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java基础知识&quot;&gt;&lt;a href=&quot;#Java基础知识&quot; class=&quot;headerlink&quot; title=&quot;Java基础知识&quot;&gt;&lt;/a&gt;Java基础知识&lt;/h1&gt;&lt;h2 id=&quot;java基本功&quot;&gt;&lt;a href=&quot;#java基本功&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
</feed>
